'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter } from 'next/navigation';
import {
  Users,
  Bed,
  ChevronDown,
  Wifi,
  Car,
  UtensilsCrossed,
  CheckCircle,
  X,
  Clock,
  Eye,
  Plus,
  Minus
} from 'lucide-react';
import { hotelRoomsService, EnrichedHotelRoom } from '@/services/hotelRoomsApi';
import { ApiService } from '@/services/api';
import { RoomPrice } from '@/types/api';
import { useHydratedTranslation } from '@/hooks/useHydratedTranslation';
import SafeImage from '@/components/common/SafeImage';
import { IconMappingService } from '@/services/iconMappingService';

interface BookingItem {
  room: EnrichedHotelRoom;
  priceType: 'base' | 'halfDay' | 'singlePerson';
  quantity: number;
  price: number;
  maxQuantity: number;
}

interface ImprovedHotelRoomsSectionProps {
  hotelId: number;
  hotelName: string;
  checkIn?: string;
  checkOut?: string;
}

export default function ImprovedHotelRoomsSection({
  hotelId,
  hotelName,
  checkIn,
  checkOut
}: ImprovedHotelRoomsSectionProps) {
  const { t } = useHydratedTranslation();
  const router = useRouter();
  const [rooms, setRooms] = useState<EnrichedHotelRoom[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [bookingItems, setBookingItems] = useState<BookingItem[]>([]);
  const [selectedRoomForFeatures, setSelectedRoomForFeatures] = useState<EnrichedHotelRoom | null>(null);
  const [roomPrices, setRoomPrices] = useState<RoomPrice[]>([]);

  // Room quantity management with price types
  const updateRoomQuantity = (room: EnrichedHotelRoom, priceType: 'base' | 'halfDay' | 'singlePerson', quantity: number) => {
    setBookingItems(prev => {
      const roomPrice = roomPrices.find(
        price => price.room_type === room.room_type && price.room_category === room.room_category
      );

      const price = priceType === 'base' ? roomPrice?.base_price || 0 :
                   priceType === 'halfDay' ? roomPrice?.half_day_price || 0 :
                   roomPrice?.single_person_price || 0;

      const itemKey = `${room.id}-${priceType}`;
      const existingIndex = prev.findIndex(item => `${item.room.id}-${item.priceType}` === itemKey);

      if (quantity === 0) {
        return prev.filter(item => `${item.room.id}-${item.priceType}` !== itemKey);
      }

      if (existingIndex >= 0) {
        const updated = [...prev];
        updated[existingIndex].quantity = quantity;
        return updated;
      } else {
        return [...prev, {
          room,
          priceType,
          quantity,
          price,
          maxQuantity: room.number_of_rooms_to_sell
        }];
      }
    });
  };

  const getRoomQuantity = (room: EnrichedHotelRoom, priceType: 'base' | 'halfDay' | 'singlePerson') => {
    const item = bookingItems.find(item => item.room.id === room.id && item.priceType === priceType);
    return item?.quantity || 0;
  };

  // Get total quantity for a room across all price types
  const getTotalRoomQuantity = (room: EnrichedHotelRoom) => {
    return bookingItems
      .filter(item => item.room.id === room.id)
      .reduce((sum, item) => sum + item.quantity, 0);
  };

  // Get remaining available quantity for a room
  const getRemainingQuantity = (room: EnrichedHotelRoom) => {
    const totalSelected = getTotalRoomQuantity(room);
    return room.number_of_rooms_to_sell - totalSelected;
  };

  const getTotalRooms = () => {
    return bookingItems.reduce((sum, item) => sum + item.quantity, 0);
  };

  const getTotalPrice = () => {
    return bookingItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  };

  const handleBookNow = () => {
    if (bookingItems.length === 0) return;

    // Prepare rooms data for booking page
    const roomsData = bookingItems.map(item => ({
      room_category_id: item.room.room_category,
      room_type_id: item.room.room_type,
      room_count: item.quantity,
      room_name: item.room.roomCategoryName,
      price: item.originalPrice * item.quantity
    }));

    // Create URL params
    const params = new URLSearchParams({
      hotelId: hotelId.toString(),
      hotelName: hotelName,
      checkIn: checkIn || '',
      checkOut: checkOut || '',
      totalPrice: getTotalPrice().toString(),
      rooms: encodeURIComponent(JSON.stringify(roomsData))
    });

    // Navigate to booking page
    router.push(`/booking?${params.toString()}`);
  };

  useEffect(() => {
    const fetchRooms = async () => {
      setLoading(true);
      setError(null);
      try {
        // Load room data and prices
        const [enrichedRooms, roomPricesData] = await Promise.all([
          hotelRoomsService.getEnrichedHotelRooms(hotelId),
          ApiService.getRoomPrices(hotelId)
        ]);
        // Filter rooms to only show those with prices
        const roomsWithPrices = enrichedRooms.filter(room => {
          return roomPricesData.some(price =>
            price.room_type === room.room_type &&
            price.room_category === room.room_category &&
            price.base_price > 0
          );
        });

        setRooms(roomsWithPrices);
        setRoomPrices(roomPricesData);
      } catch (error) {
        console.error('Error fetching rooms:', error);
        setError('Failed to load room information. Please try again later.');
        setRooms([]);
      } finally {
        setLoading(false);
      }
    };

    fetchRooms();
  }, [hotelId]);

  if (loading) {
    return (
      <div className="flex gap-6">
        <div className="flex-1">
          <div className="space-y-4">
            {[...Array(3)].map((_, index) => (
              <div key={index} className="bg-white rounded-lg border border-gray-200 p-4 animate-pulse">
                <div className="flex gap-4">
                  <div className="w-72 h-40 bg-gray-300 rounded-md"></div>
                  <div className="flex-1 space-y-3">
                    <div className="h-4 bg-gray-300 rounded w-1/3"></div>
                    <div className="space-y-2">
                      <div className="h-3 bg-gray-300 rounded w-3/4"></div>
                      <div className="h-3 bg-gray-300 rounded w-1/2"></div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        <div className="w-64">
          <div className="bg-white rounded-lg border border-gray-200 p-4 animate-pulse">
            <div className="h-4 bg-gray-300 rounded mb-3"></div>
            <div className="space-y-3">
              <div className="h-10 bg-gray-300 rounded"></div>
              <div className="h-12 bg-gray-300 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (rooms.length === 0) {
    return (
      <div className="flex gap-6">
        <div className="flex-1">
          <div className="text-center py-8">
            <Bed className="w-12 h-12 mx-auto text-gray-400 mb-3" />
            <p className="text-gray-600 text-sm">Одоогоор боломжтой өрөө байхгүй байна.</p>
          </div>
        </div>
        <div className="w-64">
          <BookingSummary
            items={bookingItems}
            totalRooms={getTotalRooms()}
            totalPrice={getTotalPrice()}
            checkIn={checkIn}
            checkOut={checkOut}
            onQuantityChange={(roomId, newQuantity) => {
              const room = rooms.find(r => r.id === roomId);
              if (room) {
                updateRoomQuantity(room, newQuantity);
              }
            }}
            onRemoveRoom={(roomId) => {
              const room = rooms.find(r => r.id === roomId);
              if (room) {
                updateRoomQuantity(room, 0);
              }
            }}
            onBookNow={handleBookNow}
          />
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="flex gap-6">
        {/* Main Content */}
        <div className="flex-1">
          <div className="space-y-4">
            {rooms.map((room) => (
              <RoomCard
                key={room.id}
                room={room}
                quantity={getRoomQuantity(room)}
                onQuantityChange={(quantity) => updateRoomQuantity(room, quantity)}
                maxQuantity={room.number_of_rooms_to_sell}
                onShowAllFeatures={() => setSelectedRoomForFeatures(room)}
                roomPrices={roomPrices}
              />
            ))}
          </div>
        </div>

        {/* Booking Summary Sidebar */}
        <div className="w-64 sticky top-20 h-fit">
          <BookingSummary
            items={bookingItems}
            totalRooms={getTotalRooms()}
            totalPrice={getTotalPrice()}
            checkIn={checkIn}
            checkOut={checkOut}
            onQuantityChange={(roomId, newQuantity) => {
              const room = rooms.find(r => r.id === roomId);
              if (room) {
                updateRoomQuantity(room, newQuantity);
              }
            }}
            onRemoveRoom={(roomId) => {
              const room = rooms.find(r => r.id === roomId);
              if (room) {
                updateRoomQuantity(room, 0);
              }
            }}
            onBookNow={handleBookNow}
          />
        </div>
      </div>

      {/* Room Features Modal */}
      <RoomFeaturesModal
        room={selectedRoomForFeatures}
        isOpen={!!selectedRoomForFeatures}
        onClose={() => setSelectedRoomForFeatures(null)}
      />

    </>
  );
}

// Room Card Component matching Figma design
// Price Section Component for individual price types
interface PriceSectionProps {
  icon: string;
  label: string;
  price: number;
  priceType: 'base' | 'halfDay' | 'singlePerson';
  quantity: number;
  maxQuantity: number;
  onQuantityChange: (quantity: number) => void;
}

function PriceSection({ icon, label, price, quantity, maxQuantity, onQuantityChange }: PriceSectionProps) {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  return (
    <div className="flex items-center justify-between p-3 hover:bg-gray-50">
      {/* Price Info */}
      <div className="flex items-center gap-2">
        <span className="text-lg">{icon}</span>
        <div>
          <div className="font-medium text-gray-900">{label}</div>
          <div className="text-sm text-gray-600">₮{price.toLocaleString()} / шөнө</div>
        </div>
      </div>

      {/* Quantity Selection */}
      <div className="flex items-center gap-2">
        {quantity > 0 && (
          <div className="text-sm text-gray-600">
            Нийт: ₮{(price * quantity).toLocaleString()}
          </div>
        )}

        <div className="relative">
          <button
            onClick={() => setIsDropdownOpen(!isDropdownOpen)}
            className="flex items-center gap-1 px-3 py-1 border border-gray-300 rounded-md bg-white hover:border-gray-400 transition-colors text-sm"
            disabled={maxQuantity === 0}
          >
            <span>
              {quantity > 0 ? `${quantity} өрөө` : 'Сонгох'}
            </span>
            <ChevronDown className="w-3 h-3" />
          </button>

          {isDropdownOpen && (
            <div className="absolute top-full right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 w-36">
              {Array.from({ length: Math.min(maxQuantity + 1, 6) }, (_, index) => (
                <button
                  key={index}
                  onClick={() => {
                    onQuantityChange(index);
                    setIsDropdownOpen(false);
                  }}
                  className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 flex justify-between items-center"
                >
                  <span>{index === 0 ? 'Сонгоогүй' : `${index} өрөө`}</span>
                  {index > 0 && (
                    <span className="text-gray-500">₮{Math.floor((price * index) / 1000)}к</span>
                  )}
                </button>
              ))}
              {maxQuantity > 5 && (
                <div className="px-3 py-2 text-sm text-gray-500 bg-gray-50">
                  +{maxQuantity - 5} өрөө боломжтой
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

interface RoomCardProps {
  room: EnrichedHotelRoom;
  onQuantityChange: (priceType: 'base' | 'halfDay' | 'singlePerson', quantity: number) => void;
  onShowAllFeatures: () => void;
  roomPrices: RoomPrice[];
  getRoomQuantity: (priceType: 'base' | 'halfDay' | 'singlePerson') => number;
  getRemainingQuantity: () => number;
}

function RoomCard({ room, onQuantityChange, onShowAllFeatures, roomPrices, getRoomQuantity, getRemainingQuantity }: RoomCardProps) {
  // Get price data for this room
  const roomPrice = roomPrices.find(
    (price: any) => price.room_type === room.room_type && price.room_category === room.room_category
  );

  const priceOptions = roomPrice ? {
    basePrice: roomPrice.base_price || 0,
    halfDayPrice: roomPrice.half_day_price && roomPrice.half_day_price > 0 ? roomPrice.half_day_price : null,
    singlePersonPrice: roomPrice.single_person_price && roomPrice.single_person_price > 0 ? roomPrice.single_person_price : null
  } : null;

  const remainingQuantity = getRemainingQuantity();

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-200"
    >
      {/* Room Header with name, icons, and general info */}
      <div className="p-3 border-b border-gray-200">
        <div className="flex items-center justify-between mb-2">
          <h3 className="font-semibold text-gray-900">{room.room_Description}</h3>
          <div className="flex items-center gap-3 text-xs text-gray-600">
            <div className="flex items-center gap-1">
              <Users className="w-3 h-3" />
              <span>Max {room.max_guest_quantity || 2}</span>
            </div>
            <div className="flex items-center gap-1">
              <Bed className="w-3 h-3" />
              <span>{room.bed_type || 'Ор'}</span>
            </div>
          </div>
        </div>

        {/* Room Images and General Facilities */}
        <div className="flex gap-3">
          {/* Room Images */}
          <div className="relative w-48">
            <div className="grid grid-cols-2 gap-1 h-32">
              {room.images && room.images.length > 0 ? (
                <>
                  <div className="col-span-2 relative">
                    <SafeImage
                      src={room.images[0].image}
                      alt={room.room_Description}
                      fill
                      className="object-cover rounded"
                    />
                  </div>
                  {room.images.length > 1 && (
                    <div className="relative">
                      <SafeImage
                        src={room.images[1].image}
                        alt={room.room_Description}
                        fill
                        className="object-cover rounded"
                      />
                    </div>
                  )}
                  {room.images.length > 2 && (
                    <div className="relative">
                      <SafeImage
                        src={room.images[2].image}
                        alt={room.room_Description}
                        fill
                        className="object-cover rounded"
                      />
                      {room.images.length > 3 && (
                        <div className="absolute inset-0 bg-black/50 flex items-center justify-center rounded">
                          <span className="text-white font-medium text-xs">+{room.images.length - 3}</span>
                        </div>
                      )}
                    </div>
                  )}
                </>
              ) : (
                <div className="col-span-2 bg-gray-200 flex items-center justify-center rounded">
                  <Bed className="w-8 h-8 text-gray-400" />
                </div>
              )}
            </div>

            {/* Availability indicator */}
            {remainingQuantity > 0 && (
              <div className="absolute top-1 left-1 bg-red-500 text-white text-xs px-2 py-1 rounded text-[10px]">
                {remainingQuantity} үлдсэн
              </div>
            )}
          </div>

          {/* General Facilities */}
          <div className="flex-1 space-y-1 text-xs text-gray-600">
            <div className="flex items-center gap-1">
              <span className="w-3 h-3 flex items-center justify-center text-[10px]">🚭</span>
              <span>Тамхи татахгүй</span>
            </div>
            <div className="flex items-center gap-1">
              <Wifi className="w-3 h-3" />
              <span>WiFi</span>
            </div>
            <div className="flex items-center gap-1">
              <Car className="w-3 h-3" />
              <span>Зогсоол</span>
            </div>
            <div className="flex items-center gap-1 text-green-600">
              <CheckCircle className="w-3 h-3" />
              <span>Өглөөний цай</span>
            </div>
            <div className="flex items-center gap-1 text-green-600">
              <CheckCircle className="w-3 h-3" />
              <span>Цуцлах боломжтой</span>
            </div>
            <div className="flex items-center gap-1 text-blue-600">
              <Clock className="w-3 h-3" />
              <span>Шуурхай баталгаа</span>
            </div>

            {/* See All Features Button */}
            <button
              onClick={onShowAllFeatures}
              className="flex items-center gap-1 text-blue-600 hover:text-blue-700 font-medium mt-2"
            >
              <Eye className="w-3 h-3" />
              Дэлгэрэнгүй
            </button>
          </div>
        </div>
      </div>

      {/* Three Horizontal Price Sections */}
      {priceOptions && (
        <div className="divide-y divide-gray-200">
          {/* Base Price Section */}
          <PriceSection
            icon="🏨"
            label="Энгийн өрөө"
            price={priceOptions.basePrice}
            priceType="base"
            quantity={getRoomQuantity('base')}
            maxQuantity={remainingQuantity + getRoomQuantity('base')}
            onQuantityChange={(qty) => onQuantityChange('base', qty)}
          />

          {/* Half Day Price Section */}
          {priceOptions.halfDayPrice && (
            <PriceSection
              icon="⏰"
              label="Хагас өдөр"
              price={priceOptions.halfDayPrice}
              priceType="halfDay"
              quantity={getRoomQuantity('halfDay')}
              maxQuantity={remainingQuantity + getRoomQuantity('halfDay')}
              onQuantityChange={(qty) => onQuantityChange('halfDay', qty)}
            />
          )}

          {/* Single Person Price Section */}
          {priceOptions.singlePersonPrice && (
            <PriceSection
              icon="👤"
              label="1 хүний үнэ"
              price={priceOptions.singlePersonPrice}
              priceType="singlePerson"
              quantity={getRoomQuantity('singlePerson')}
              maxQuantity={remainingQuantity + getRoomQuantity('singlePerson')}
              onQuantityChange={(qty) => onQuantityChange('singlePerson', qty)}
            />
          )}
        </div>
      )}
    </motion.div>
  );
}

// Booking Summary Component with updated interface
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-200"
    >
      <div className="flex">
        {/* Room Images and Amenities Column */}
        <div className="w-72">
          {/* Room Images */}
          <div className="relative mb-3">
            <div className="grid grid-cols-2 gap-1 h-40">
              {room.images && room.images.length > 0 ? (
                <>
                  <div className="col-span-2 relative">
                    <SafeImage 
                      src={room.images[0].image}
                      alt={room.room_Description}
                      fill
                      className="object-cover"
                    />
                  </div>
                  {room.images.length > 1 && (
                    <div className="relative">
                      <SafeImage 
                        src={room.images[1].image}
                        alt={room.room_Description}
                        fill
                        className="object-cover"
                      />
                    </div>
                  )}
                  {room.images.length > 2 && (
                    <div className="relative">
                      <SafeImage 
                        src={room.images[2].image}
                        alt={room.room_Description}
                        fill
                        className="object-cover"
                      />
                      {room.images.length > 3 && (
                        <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                          <span className="text-white font-medium">+{room.images.length - 3}</span>
                        </div>
                      )}
                    </div>
                  )}
                </>
              ) : (
                <div className="col-span-2 bg-gray-200 flex items-center justify-center">
                  <Bed className="w-12 h-12 text-gray-400" />
                </div>
              )}
            </div>
            
            {/* Availability indicator */}
            {maxQuantity > 0 && (
              <div className="absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded text-[10px]">
                {maxQuantity} үлдсэн
              </div>
            )}
          </div>

          {/* Room Amenities under images */}
          <div className="space-y-1 text-xs text-gray-600 px-2">
            <div className="flex items-center gap-1">
              <span className="w-3 h-3 flex items-center justify-center text-[10px]">🚭</span>
              <span>Тамхи татахгүй</span>
            </div>
            <div className="flex items-center gap-1">
              <Wifi className="w-3 h-3" />
              <span>WiFi</span>
            </div>
            <div className="flex items-center gap-1">
              <Car className="w-3 h-3" />
              <span>Зогсоол</span>
            </div>

            {/* See All Features Button */}
            <button
              onClick={onShowAllFeatures}
              className="flex items-center gap-1 text-blue-600 hover:text-blue-700 font-medium text-xs mt-2"
            >
              <Eye className="w-3 h-3" />
              Дэлгэрэнгүй
            </button>
          </div>
        </div>

        {/* Room Details */}
        <div className="flex-1 p-4">
          <div className="flex justify-between items-start mb-3">
            <div>
              <div className="flex items-center gap-1 mb-1">
                <Users className="w-3 h-3 text-gray-600" />
                <span className="text-xs text-gray-600">{room.adultQty + room.childQty} зочин</span>
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-1">
                {room.roomCategoryName}
              </h3>
              <div className="flex items-center gap-1 mb-2">
                <Bed className="w-3 h-3 text-gray-600" />
                <span className="text-xs text-gray-600">
                  {room.bedTypeName} • {room.room_size}м²
                </span>
              </div>
            </div>

            {/* Quantity Selector */}
            <div className="relative">
              <button
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                disabled={maxQuantity === 0}
                className="flex items-center gap-2 px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 text-sm"
              >
                <span>{quantity} өрөө</span>
                <ChevronDown className="w-4 h-4" />
              </button>

              {isDropdownOpen && (
                <div className="absolute right-0 top-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 w-36 max-h-48 overflow-y-auto">
                  {Array.from({ length: Math.min(maxQuantity + 1, 6) }, (_, num) => (
                    <button
                      key={num}
                      onClick={() => {
                        onQuantityChange(num);
                        setIsDropdownOpen(false);
                      }}
                      className="block w-full text-left px-3 py-1 hover:bg-blue-50 text-xs"
                    >
                      <div className="flex text-gray-600 justify-between items-center">
                        <span className=" ">
                          {num === 0 ? '0' : `${num} өрөө`}
                        </span>
                        {num > 0 && (
                          <span className=" ">
                            ₮{(originalPrice * num / 1000).toFixed(0)}к
                          </span>
                        )}
                      </div>
                    </button>
                  ))}
                  {maxQuantity > 5 && (
                    <div className="px-3 py-2 text-xs text-gray-500 bg-gray-50">
                      +{maxQuantity - 5} өрөө боломжтой
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>

          {/* Room Features - Booking related info only */}
          <div className="space-y-1 mb-4">
            {/* Green checkmarks for available features */}
            <div className="flex items-center gap-1 text-green-600">
              <CheckCircle className="w-3 h-3" />
              <span className="text-xs">Өглөөний цай</span>
            </div>
            <div className="flex items-center gap-1 text-green-600">
              <CheckCircle className="w-3 h-3" />
              <span className="text-xs">Цуцлах боломжтой</span>
            </div>

            {/* Blue features */}
            <div className="flex items-center gap-1 text-blue-600">
              <Clock className="w-3 h-3" />
              <span className="text-xs">Шуурхай баталгаа</span>
            </div>
          </div>
        </div>

        {/* Pricing Column - Booking.com/Trip.com Style */}
        <div className="w-48 p-3 bg-gray-50 flex flex-col justify-between">
          <div>
            {priceOptions ? (
              <div className="space-y-2">
                {/* Today's lowest price header */}
                <div className="text-xs text-gray-600 mb-1">Өнөөдрийн хамгийн бага үнэ</div>

                {(() => {
                  const availablePrices = [
                    { type: 'base', label: 'Энгийн өрөө', price: priceOptions.basePrice, icon: '🏨' },
                    ...(priceOptions.halfDayPrice ? [{ type: 'halfDay', label: 'Хагас өдөр', price: priceOptions.halfDayPrice, icon: '⏰' }] : []),
                    ...(priceOptions.singlePersonPrice ? [{ type: 'single', label: '1 хүний үнэ', price: priceOptions.singlePersonPrice, icon: '👤' }] : [])
                  ];

                  const lowestPrice = Math.min(...availablePrices.map(p => p.price));
                  const lowestOption = availablePrices.find(p => p.price === lowestPrice);

                  return (
                    <div className="space-y-1">
                      {/* Main price display */}
                      <div className="text-right">
                        <div className="flex items-center justify-between mb-1">
                          <span className="text-xs text-blue-600 flex items-center gap-1">
                            <span>{lowestOption?.icon}</span>
                            <span>{lowestOption?.label}</span>
                          </span>
                          <div className="text-lg font-bold text-gray-900">
                            ₮{lowestPrice.toLocaleString()}
                          </div>
                        </div>
                        <div className="text-xs text-gray-600 text-right">шөнө тутам</div>
                      </div>

                      {/* Show other available prices */}
                      {availablePrices.length > 1 && (
                        <div className="space-y-1 pt-2 border-t border-gray-200">
                          {availablePrices
                            .filter(p => p.price !== lowestPrice)
                            .map((option, index) => (
                              <div key={index} className="flex items-center justify-between text-xs">
                                <span className="text-gray-600 flex items-center gap-1">
                                  <span>{option.icon}</span>
                                  <span>{option.label}:</span>
                                </span>
                                <span className="font-medium">₮{option.price.toLocaleString()}</span>
                              </div>
                            ))}
                        </div>
                      )}

                      {/* Show more options link */}
                      {availablePrices.length > 1 && (
                        <div className="text-xs text-blue-600 cursor-pointer hover:underline text-right pt-1">
                          {availablePrices.length - 1} нэмэлт үнийн сонголт →
                        </div>
                      )}

                      {/* Total for multiple rooms */}
                      {quantity > 1 && (
                        <div className="text-xs text-gray-500 text-right pt-1 border-t border-gray-200">
                          Нийт: ₮{(lowestPrice * quantity).toLocaleString()}
                        </div>
                      )}
                    </div>
                  );
                })()}
              </div>
            ) : (
              // Fallback for rooms without API price data
              <div className="text-right">
                <div className="text-lg font-bold">
                  ₮{discountedPrice.toLocaleString()}
                </div>
                <div className="text-xs text-gray-600">
                  шөнө тутам
                </div>
                {quantity > 1 && (
                  <div className="text-xs text-gray-500">
                    Нийт: ₮{(discountedPrice * quantity).toLocaleString()}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </motion.div>
  );
}

// Booking Summary Component
interface BookingSummaryProps {
  items: BookingItem[];
  totalRooms: number;
  totalPrice: number;
  checkIn?: string;
  checkOut?: string;
  onQuantityChange: (roomId: number, newQuantity: number) => void;
  onRemoveRoom: (roomId: number) => void;
  onBookNow: () => void;
}

function BookingSummary({ items, totalRooms, totalPrice, checkIn, checkOut, onQuantityChange, onRemoveRoom, onBookNow }: BookingSummaryProps) {
  const { t } = useHydratedTranslation();

  return (
    <div className="bg-white rounded-lg border border-gray-200 p-4">
      <div className="flex items-center justify-between mb-3">
        <span className="text-xs text-gray-600">Нийт үнэ:</span>
        <span className="text-lg font-bold">₮{totalPrice.toLocaleString()}</span>
      </div>

      <button
        onClick={onBookNow}
        disabled={items.length === 0}
        className="w-full bg-blue-600 text-white py-2 px-3 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors mb-4 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        Захиалах
      </button>

      <div className="border-t pt-4">
        <h3 className="font-medium text-gray-900 mb-3 text-sm">Сонгосон өрөөнүүд:</h3>

        {items.length === 0 ? (
          <p className="text-gray-500 text-xs">Өрөө сонгоогүй байна</p>
        ) : (
          <div className="space-y-2 mb-4">
            {items.map((item) => (
              <div key={item.room.id} className="border rounded-md p-2 bg-gray-50">
                {/* Room Header with Remove Button */}
                <div className="flex justify-between items-start mb-1">
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900 text-xs">{item.room.roomCategoryName}</h4>
                    <div className="text-[10px] text-gray-600">
                      ₮{item.originalPrice.toLocaleString()} × {item.quantity} = ₮{(item.originalPrice * item.quantity).toLocaleString()}
                    </div>
                  </div>
                  <button
                    onClick={() => onRemoveRoom(item.room.id)}
                    className="p-1 hover:bg-red-100 rounded-full transition-colors text-red-600"
                    title="Хасах"
                  >
                    <X className="w-3 h-3" />
                  </button>
                </div>

                {/* Quantity Controls */}
                <div className="flex items-center justify-between">
                  <span className="text-[10px] text-gray-600">Тоо ширхэг:</span>
                  <div className="flex items-center gap-1">
                    <button
                      onClick={() => onQuantityChange(item.room.id, Math.max(1, item.quantity - 1))}
                      disabled={item.quantity <= 1}
                      className="w-5 h-5 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <Minus className="w-2 h-2" />
                    </button>
                    <span className="w-6 text-center font-medium text-xs">{item.quantity}</span>
                    <button
                      onClick={() => onQuantityChange(item.room.id, item.quantity + 1)}
                      disabled={item.quantity >= item.maxQuantity}
                      className="w-5 h-5 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white"
                      title={item.quantity >= item.maxQuantity ? `Maximum ${item.maxQuantity} rooms available` : 'Increase quantity'}
                    >
                      <Plus className="w-2 h-2" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        <div className="border-t pt-3">
          <div className="flex justify-between items-center">
            <span className="font-medium text-xs">Нийт өрөө:</span>
            <span className="font-bold text-sm">{totalRooms}</span>
          </div>
        </div>
      </div>
    </div>
  );
}

// Room Features Modal Component
interface RoomFeaturesModalProps {
  room: EnrichedHotelRoom | null;
  isOpen: boolean;
  onClose: () => void;
}

function RoomFeaturesModal({ room, isOpen, onClose }: RoomFeaturesModalProps) {
  if (!room) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black/50 backdrop-blur-sm"
            onClick={onClose}
          />
          
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            className="relative bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
          >
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-xl font-bold text-gray-900">
              {room.roomCategoryName} - Бүх тохижилт
            </h2>
            <p className="text-gray-600 text-sm">{room.room_Description}</p>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        <div className="p-6 overflow-y-auto max-h-[calc(90vh-150px)]">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Room Facilities */}
            {room.facilitiesDetails.length > 0 && (
              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  Өрөөний тохижилт
                </h4>
                <div className="space-y-3">
                  {room.facilitiesDetails.map((facility, index) => (
                    <div key={index} className="flex items-center text-sm text-gray-900">
                      {IconMappingService.getRoomFacilityIcon(facility.id, facility.name_mn)}
                      <span className="ml-3">
                        {hotelRoomsService.getRoomFacilityName(facility, 'mn')}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Bathroom Items */}
            {room.bathroomItemsDetails.length > 0 && (
              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  Ариун цэврийн өрөө
                </h4>
                <div className="space-y-3">
                  {room.bathroomItemsDetails.map((item, index) => (
                    <div key={index} className="flex items-center text-sm text-gray-900">
                      {IconMappingService.getBathroomItemIcon(item.id, item.name_mn)}
                      <span className="ml-3">
                        {hotelRoomsService.getBathroomItemName(item, 'mn')}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Food and Drink */}
            {room.foodAndDrinkDetails.length > 0 && (
              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                  <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                  Хоол ундны үйлчилгээ
                </h4>
                <div className="space-y-3">
                  {room.foodAndDrinkDetails.map((item, index) => (
                    <div key={index} className="flex items-center text-sm text-gray-900">
                      {IconMappingService.getFoodAndDrinkIcon(item.id, item.name_mn)}
                      <span className="ml-3">
                        {hotelRoomsService.getFoodAndDrinkName(item, 'mn')}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Outdoor and View */}
            {room.outdoorAndViewDetails.length > 0 && (
              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                  <div className="w-2 h-2 bg-emerald-500 rounded-full"></div>
                  Үзэмж ба гадна талбай
                </h4>
                <div className="space-y-3">
                  {room.outdoorAndViewDetails.map((item, index) => (
                    <div key={index} className="flex items-center text-sm text-gray-900">
                      {IconMappingService.getOutdoorAndViewIcon(item.id, item.name_mn)}
                      <span className="ml-3">
                        {hotelRoomsService.getOutdoorAndViewName(item, 'mn')}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Free Toiletries */}
            {room.freeToiletriesDetails.length > 0 && (
              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  Үнэгүй ариун цэврийн хэрэгсэл
                </h4>
                <div className="space-y-3">
                  {room.freeToiletriesDetails.map((item, index) => (
                    <div key={index} className="flex items-center text-sm text-gray-900">
                      {IconMappingService.getFreeToiletriesIcon(item.id, item.name_mn)}
                      <span className="ml-3">
                        {hotelRoomsService.getFreeToiletriesName(item, 'mn')}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
}

